{"version":3,"sources":["meteor://ðŸ’»app/packages/ohif:study-list/both/index.js","meteor://ðŸ’»app/packages/ohif:study-list/both/base.js","meteor://ðŸ’»app/packages/ohif:study-list/both/collections.js","meteor://ðŸ’»app/packages/ohif:study-list/server/index.js","meteor://ðŸ’»app/packages/ohif:study-list/server/publications.js","meteor://ðŸ’»app/packages/ohif:study-list/server/lib/encodeQueryData.js","meteor://ðŸ’»app/packages/ohif:study-list/server/lib/index.js","meteor://ðŸ’»app/packages/ohif:study-list/server/lib/parseFloatArray.js","meteor://ðŸ’»app/packages/ohif:study-list/server/lib/remoteGetValue.js","meteor://ðŸ’»app/packages/ohif:study-list/server/methods/getStudyMetadata.js","meteor://ðŸ’»app/packages/ohif:study-list/server/methods/importStudies.js","meteor://ðŸ’»app/packages/ohif:study-list/server/methods/index.js","meteor://ðŸ’»app/packages/ohif:study-list/server/methods/studylistSearch.js","meteor://ðŸ’»app/packages/ohif:study-list/server/services/index.js","meteor://ðŸ’»app/packages/ohif:study-list/server/services/namespace.js","meteor://ðŸ’»app/packages/ohif:study-list/server/services/dimse/instances.js","meteor://ðŸ’»app/packages/ohif:study-list/server/services/dimse/retrieveMetadata.js","meteor://ðŸ’»app/packages/ohif:study-list/server/services/dimse/setup.js","meteor://ðŸ’»app/packages/ohif:study-list/server/services/dimse/studies.js","meteor://ðŸ’»app/packages/ohif:study-list/server/services/qido/instances.js","meteor://ðŸ’»app/packages/ohif:study-list/server/services/qido/studies.js","meteor://ðŸ’»app/packages/ohif:study-list/server/services/remote/instances.js","meteor://ðŸ’»app/packages/ohif:study-list/server/services/remote/retrieveMetadata.js","meteor://ðŸ’»app/packages/ohif:study-list/server/services/remote/studies.js","meteor://ðŸ’»app/packages/ohif:study-list/server/services/wado/retrieveMetadata.js"],"names":["module","watch","require","OHIF","v","studylist","collections","actions","export","StudyImportStatus","Mongo","Collection","_debugName","Meteor","publish","find","encodeQueryData","data","ret","d","push","encodeURIComponent","join","parseFloatArray","obj","result","objs","split","i","length","parseFloat","remoteGetValue","Value","methods","GetStudyMetadata","studyInstanceUid","log","info","server","servers","getCurrentServer","type","Services","WADO","RetrieveMetadata","DIMSE","fs","Npm","fiber","WebApp","connectHandlers","use","req","res","headers","filename","statusCode","end","dicomDir","createFolderIfNotExist","fullFileName","file","createWriteStream","on","error","warn","writeHead","pipe","importSupported","importStudies","studiesToImport","studyImportStatusId","importStudiesDIMSE","createStudyImportStatus","studyImportStatus","numberOfStudiesImported","numberOfStudiesFailed","insert","removeStudyImportStatus","id","remove","storeInstances","err","update","_id","$inc","fileExists","unlink","run","folder","folderParts","folderPart","folderExists","mkdirSync","statSync","isFile","isDirectory","StudyListSearch","filter","QIDO","Studies","REMOTE","resultDataToStudyMetadata","resultData","seriesMap","seriesList","forEach","instanceRaw","instance","toObject","seriesInstanceUid","series","seriesNumber","instances","peers","serverRoot","host","port","sopInstanceUid","uri","sopClassUid","instanceNumber","Instances","retrieveInstances","getValue","element","defaultValue","value","getSourceImageInstanceUid","SourceImageSequence","anInstance","studyData","patientName","patientId","patientBirthDate","patientSex","accessionNumber","studyDate","modalities","studyDescription","imageCount","institutionName","seriesDescription","modality","instanceSummary","imageType","imagePositionPatient","imageOrientationPatient","frameOfReferenceUID","sliceThickness","sliceLocation","tablePosition","samplesPerPixel","photometricInterpretation","planarConfiguration","rows","columns","pixelSpacing","bitsAllocated","bitsStored","highBit","pixelRepresentation","windowCenter","windowWidth","rescaleIntercept","rescaleSlope","sourceImageInstanceUid","laterality","viewPosition","acquisitionDateTime","numberOfFrames","frameIncrementPointer","frameTime","frameTimeVector","lossyImageCompression","derivationDescription","lossyImageCompressionRatio","lossyImageCompressionMethod","spacingBetweenSlices","echoNumber","contrastBolusAgent","wadouri","wadoUriRoot","WADOProxy","convertURL","activeServer","supportsInstanceRetrievalByStudyUid","results","retrieveInstancesByStudyOnly","CurrentServer","setupDIMSE","connection","reset","Error","addPeer","peer","startup","observe","added","changed","resultDataToStudies","studies","studyRaw","study","studyTime","referringPhysicianName","patientBirthdate","studyId","filterStudyDate","studyDateFrom","studyDateTo","convertDate","moment","date","format","dateFrom","dateTo","parameters","modalitiesInStudy","retrieveStudies","buildUrl","qidoRoot","DICOMWeb","getString","url","getJSON","requestOptions","dateToString","year","getFullYear","toString","month","getMonth","day","getDate","repeat","concat","filterToQIDOURL","commaSeparatedFields","PatientName","PatientID","AccessionNumber","StudyDescription","ModalitiesInStudy","limit","includefield","qidoSupportsIncludeField","Date","StudyDate","getNumber","getName","numberOfStudyRelatedSeries","numberOfStudyRelatedInstances","getModalities","SeriesInstanceUID","SeriesNumber","SOPClassUID","InstanceNumber","remote","OrthancRemote","root","sourceAE","findInstances","iid","imageRendering","wadorsuri","wadoRoot","console","retrieveMetadata","StudyTime","ReferringPhysicianName","PatientBirthDate","PatientSex","StudyID","NumberOfStudyRelatedSeries","NumberOfStudyRelatedInstances","findStudies","paletteColorCache","count","maxAge","entries","isValidUID","paletteUID","get","entry","hasOwnProperty","now","time","add","uid","buildInstanceWadoUrl","params","buildInstanceWadoRsUri","buildInstanceFrameWadoRsUri","frame","baseWadoRsUri","getPaletteColor","tag","lutDescriptor","lut","numLutEntries","bits","BulkDataURI","getBulkData","readUInt16LE","readUInt8","getPaletteColors","r","g","b","red","green","blue","name","message","getFrameIncrementPointer","frameIncrementPointerNames","getRadiopharmaceuticalInfo","radiopharmaceuticalInfo","undefined","firstPetRadiopharmaceuticalInfo","radiopharmaceuticalStartTime","radionuclideTotalDose","radionuclideHalfLife","patientAge","patientSize","patientWeight","seriesDate","seriesTime","pixelAspectRatio","smallestPixelValue","largestPixelValue","rescaleType","thumbnailRendering","redPaletteColorLookupTableDescriptor","greenPaletteColorLookupTableDescriptor","bluePaletteColorLookupTableDescriptor","palettes","paletteColorLookupTableUID","redPaletteColorLookupTableData","greenPaletteColorLookupTableData","bluePaletteColorLookupTableData"],"mappings":"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","file":"/packages/ohif_study-list.js","sourcesContent":["import './base.js';\nimport './collections.js';\n","import { OHIF } from 'meteor/ohif:core';\n\nOHIF.studylist = {\n    collections: {},\n    actions: {}\n};\n","import { Mongo } from 'meteor/mongo';\nimport { OHIF } from 'meteor/ohif:core';\n\nconst StudyImportStatus = new Mongo.Collection('studyImportStatus');\nStudyImportStatus._debugName = 'StudyImportStatus';\nOHIF.studylist.collections.StudyImportStatus = StudyImportStatus;\n\nexport { StudyImportStatus };\n","import './publications.js';\n\nimport './lib';\nimport './methods';\nimport './services';\n","import { Meteor } from 'meteor/meteor';\nimport { OHIF } from 'meteor/ohif:core';\n\nMeteor.publish('studyImportStatus', () => OHIF.studylist.collections.StudyImportStatus.find());\n","/**\n * Converts the properties to URL query parameters.  Based on:\n * http://stackoverflow.com/questions/111529/create-query-parameters-in-javascript\n *\n * @param data\n * @returns {string}\n */\nencodeQueryData = function(data) {\n    var ret = [];\n\n    for (var d in data) {\n        if (data[d]) {\n            ret.push(encodeURIComponent(d) + '=' + encodeURIComponent(data[d]));\n        }\n    }\n\n    return ret.join('&');\n};\n","import './remoteGetValue.js';\nimport './encodeQueryData.js';\n","export const parseFloatArray = function(obj) {\n    var result = [];\n\n    if (!obj) {\n        return result;\n    }\n\n    var objs = obj.split(\"\\\\\");\n    for (var i = 0; i < objs.length; i++) {\n        result.push(parseFloat(objs[i]));\n    }\n\n    return result;\n};\n","export const remoteGetValue = function(obj) {\n  return obj ? obj.Value : null;\n};\n","import { Meteor } from 'meteor/meteor';\nimport { OHIF } from 'meteor/ohif:core';\n\nMeteor.methods({\n    /**\n     * Retrieves Study metadata given a Study Instance UID\n     * This Meteor method is available from both the client and the server\n     */\n    GetStudyMetadata: function(studyInstanceUid) {\n        OHIF.log.info('GetStudyMetadata(%s)', studyInstanceUid);\n\n        // Get the server data. This is user-defined in the config.json files or through servers\n        // configuration modal\n        const server = OHIF.servers.getCurrentServer();\n\n        if (!server) {\n            throw 'No properly configured server was available over DICOMWeb or DIMSE.';\n        }\n\n        if (server.type === 'dicomWeb') {\n            return Services.WADO.RetrieveMetadata(server, studyInstanceUid);\n        } else if (server.type === 'dimse') {\n            return Services.DIMSE.RetrieveMetadata(studyInstanceUid);\n        }\n    }\n});\n","import { Meteor } from 'meteor/meteor';\nimport { OHIF } from 'meteor/ohif:core';\n\nconst fs = Npm.require('fs');\nconst fiber = Npm.require('fibers');\n\nWebApp.connectHandlers.use('/uploadFilesToImport', function(req, res) {\n    if (!req.headers.filename) {\n        //  Response: BAD REQUEST (400)\n        res.statusCode = 400;\n        res.end();\n    }\n\n    //  Store files in temp location (they will be deleted when their import operations are completed)\n    const dicomDir = '/tmp/dicomDir';\n    createFolderIfNotExist(dicomDir);\n\n    const fullFileName = dicomDir + '/' + req.headers.filename;\n    const file = fs.createWriteStream(fullFileName);\n\n    file.on('error', function(error) {\n        OHIF.log.warn(error);\n        //  Response: INTERNAL SERVER ERROR (500)\n        res.statusCode = 400;\n        res.end();\n    });\n    file.on('finish', function() {\n        //  Response: SUCCESS (200)\n        res.writeHead(200, { 'Content-Type': 'text/plain' });\n        res.end(fullFileName);\n    });\n\n    //  Pipe the request to the file\n    req.pipe(file);\n});\n\nMeteor.methods({\n    /**\n     * Returns true if import is supported for default service type\n     * @returns {boolean}\n     */\n    importSupported: function() {\n        const server = OHIF.servers.getCurrentServer();\n        if (server && server.type === 'dimse') {\n            return true;\n        }\n    },\n    /**\n     * Imports studies from local into study list\n     * @param studiesToImport Studies to import\n     * @param studyImportStatusId Study import status collection id to track import status\n     */\n    importStudies: function(studiesToImport, studyImportStatusId) {\n        if (!studiesToImport || !studyImportStatusId) {\n            return;\n        }\n\n        const server = OHIF.servers.getCurrentServer();\n\n        if (!server) {\n            throw 'No properly configured server was available over DICOMWeb or DIMSE.';\n        }\n\n        if (server.type === 'dicomWeb') {\n            //TODO: Support importing studies into dicomWeb\n            OHIF.log.warn('Importing studies into dicomWeb is currently not supported.');\n        } else if (server.type === 'dimse') {\n            importStudiesDIMSE(studiesToImport, studyImportStatusId);\n        }\n    },\n    /**\n     * Create a new study import status item and insert it into the collection to track import status\n     * @returns {studyImportStatusId: string}\n     */\n    createStudyImportStatus: function() {\n        const studyImportStatus = {\n            numberOfStudiesImported: 0,\n            numberOfStudiesFailed: 0\n        };\n        return OHIF.studylist.collections.StudyImportStatus.insert(studyImportStatus);\n    },\n    /**\n     * Remove the study import status item from the collection\n     * @param id Collection id of the study import status in the collection\n     */\n    removeStudyImportStatus: function(id) {\n        OHIF.studylist.collections.StudyImportStatus.remove(id);\n    }\n});\n\nfunction importStudiesDIMSE(studiesToImport, studyImportStatusId) {\n    if (!studiesToImport || !studyImportStatusId) {\n        return;\n    }\n    //  Perform C-Store to import studies and handle the callbacks to update import status\n    DIMSE.storeInstances(studiesToImport, function(err, file) {\n        try {\n            //  Use fiber to be able to modify meteor collection in callback\n            fiber(function() {\n                try {\n                    //  Update the import status\n                    if (err) {\n                        OHIF.studylist.collections.StudyImportStatus.update(\n                            { _id: studyImportStatusId },\n                            { $inc: { numberOfStudiesFailed: 1 } }\n                        );\n                        OHIF.log.warn('Failed to import study via DIMSE: ', file, err);\n                    } else {\n                        OHIF.studylist.collections.StudyImportStatus.update(\n                            { _id: studyImportStatusId },\n                            { $inc: { numberOfStudiesImported: 1 } }\n                        );\n                        OHIF.log.info('Study successfully imported via DIMSE: ', file);\n                    }\n\n                } catch(error) {\n                    OHIF.studylist.collections.StudyImportStatus.update(\n                        { _id: studyImportStatusId },\n                        { $inc: { numberOfStudiesFailed: 1 } }\n                    );\n                    OHIF.log.warn('Failed to import study via DIMSE: ', file, error);\n                } finally {\n                    //  The import operation of this file is completed, so delete it if still exists\n                    if (fileExists(file)) {\n                        fs.unlink(file);\n                    }\n                }\n\n            }).run();\n        } catch(error) {\n            OHIF.studylist.collections.StudyImportStatus.update(\n                { _id: studyImportStatusId },\n                { $inc: { numberOfStudiesFailed: 1 } }\n            );\n            OHIF.log.warn('Failed to import study via DIMSE: ', file, error);\n        }\n\n    });\n}\n\nfunction createFolderIfNotExist(folder) {\n    const folderParts = folder.split('/');\n    let folderPart = folderParts[0];\n    for (let i = 1; i < folderParts.length; i++) {\n        folderPart += '/' + folderParts[i];\n        if (!folderExists(folderPart)) {\n            fs.mkdirSync(folderPart);\n        }\n    }\n}\n\nfunction fileExists(folder) {\n    try {\n        return fs.statSync(folder).isFile();\n    } catch (err) {\n        return false;\n    }\n}\n\nfunction folderExists(folder) {\n    try {\n        return fs.statSync(folder).isDirectory();\n    } catch (err) {\n        return false;\n    }\n}\n","import './getStudyMetadata.js';\nimport './importStudies.js';\nimport './studylistSearch.js';\n","import { Meteor } from 'meteor/meteor';\nimport { OHIF } from 'meteor/ohif:core';\n\nMeteor.methods({\n    /**\n     * Use the specified filter to conduct a search from the DICOM server\n     *\n     * @param filter\n     */\n    StudyListSearch(filter) {\n        // Get the server data. This is user-defined in the config.json files or through servers\n        // configuration modal\n        const server = OHIF.servers.getCurrentServer();\n\n        if (!server) {\n            throw 'No properly configured server was available over DICOMWeb or DIMSE.';\n        }\n\n        if (server.type === 'dicomWeb') {\n            return Services.QIDO.Studies(server, filter);\n        } else if (server.type === 'dimse') {\n            return Services.DIMSE.Studies(filter);\n        }\n    }\n});\n","import './namespace.js';\n\n// DICOMWeb instance, study, and metadata retrieval\nimport './qido/instances.js';\nimport './qido/studies.js';\nimport './wado/retrieveMetadata.js';\n\n// DIMSE instance, study, and metadata retrieval\nimport './dimse/instances.js';\nimport './dimse/studies.js';\nimport './dimse/retrieveMetadata.js';\nimport './dimse/setup.js';\n\n// Study, instance, and metadata retrieval from remote PACS via Orthanc as a proxy\nimport './remote/instances.js';\nimport './remote/studies.js';\nimport './remote/retrieveMetadata.js';\n","Services = {};\nServices.QIDO = {};\nServices.WADO = {};\nServices.DIMSE = {};\nServices.REMOTE = {};\n\nremoteGetValue = function(obj) {\n  return obj ? obj.Value : null;\n};\n","import { OHIF } from 'meteor/ohif:core';\n\n/**\n * Parses data returned from a study search and transforms it into\n * an array of series that are present in the study\n *\n * @param resultData\n * @returns {Array} Series List\n */\nfunction resultDataToStudyMetadata(resultData, studyInstanceUid) {\n    const seriesMap = {};\n    const seriesList = [];\n\n    resultData.forEach(function(instanceRaw) {\n        const instance = instanceRaw.toObject();\n        // Use seriesMap to cache series data\n        // If the series instance UID has already been used to\n        // process series data, continue using that series\n        const seriesInstanceUid = instance[0x0020000E];\n        let series = seriesMap[seriesInstanceUid];\n\n        // If no series data exists in the seriesMap cache variable,\n        // process any available series data\n        if (!series) {\n            series = {\n                seriesInstanceUid: seriesInstanceUid,\n                seriesNumber: instance[0x00200011],\n                instances: []\n            };\n\n            // Save this data in the seriesMap cache variable\n            seriesMap[seriesInstanceUid] = series;\n            seriesList.push(series);\n        }\n\n        // TODO: Check which peer it should point to\n        const server = OHIF.servers.getCurrentServer().peers[0];\n\n        const serverRoot = server.host + ':' + server.port;\n\n        const sopInstanceUid = instance[0x00080018];\n        const uri = serverRoot + '/studies/' + studyInstanceUid + '/series/' + seriesInstanceUid + '/instances/' + sopInstanceUid + '/frames/1';\n\n        // Add this instance to the current series\n        series.instances.push({\n            sopClassUid: instance[0x00080016],\n            sopInstanceUid,\n            uri,\n            instanceNumber: instance[0x00200013]\n        });\n    });\n    return seriesList;\n}\n\n/**\n * Retrieve a set of instances using a DIMSE call\n * @param studyInstanceUid\n * @returns {{wadoUriRoot: String, studyInstanceUid: String, seriesList: Array}}\n */\nServices.DIMSE.Instances = function(studyInstanceUid) {\n    //var url = buildUrl(server, studyInstanceUid);\n    const result = DIMSE.retrieveInstances(studyInstanceUid);\n\n    return {\n        studyInstanceUid: studyInstanceUid,\n        seriesList: resultDataToStudyMetadata(result, studyInstanceUid)\n    };\n};\n","import { OHIF } from 'meteor/ohif:core';\nimport { parseFloatArray } from 'meteor/ohif:study-list/server/lib/parseFloatArray';\n\n/**\n * Returns the value of the element (e.g. '00280009')\n *\n * @param element - The group/element of the element (e.g. '00280009')\n * @param defaultValue - The default value to return if the element does not exist\n * @returns {*}\n */\nfunction getValue(element, defaultValue) {\n    if (!element || !element.value) {\n        return defaultValue;\n    }\n\n    return element.value;\n}\n\n/**\n * Parses the SourceImageSequence, if it exists, in order\n * to return a ReferenceSOPInstanceUID. The ReferenceSOPInstanceUID\n * is used to refer to this image in any accompanying DICOM-SR documents.\n *\n * @param instance\n * @returns {String} The ReferenceSOPInstanceUID\n */\nfunction getSourceImageInstanceUid(instance) {\n    // TODO= Parse the whole Source Image Sequence\n    // This is a really poor workaround for now.\n    // Later we should probably parse the whole sequence.\n    const SourceImageSequence = instance[0x00082112];\n    if (SourceImageSequence && SourceImageSequence.length) {\n        return SourceImageSequence[0][0x00081155];\n    }\n}\n\n/**\n * Parses result data from a DIMSE search into Study MetaData\n * Returns an object populated with study metadata, including the\n * series list.\n *\n * @param studyInstanceUid\n * @param resultData\n * @returns {{seriesList: Array, patientName: *, patientId: *, accessionNumber: *, studyDate: *, modalities: *, studyDescription: *, imageCount: *, studyInstanceUid: *}}\n */\nfunction resultDataToStudyMetadata(studyInstanceUid, resultData) {\n    OHIF.log.info('resultDataToStudyMetadata');\n    const seriesMap = {};\n    const seriesList = [];\n\n    if (!resultData.length) {\n        return;\n    }\n\n    const anInstance = resultData[0].toObject();\n    if (!anInstance) {\n        return;\n    }\n\n    const studyData = {\n        seriesList: seriesList,\n        patientName: anInstance[0x00100010],\n        patientId: anInstance[0x00100020],\n        patientBirthDate: anInstance[0x00100030],\n        patientSex: anInstance[0x00100040],\n        accessionNumber: anInstance[0x00080050],\n        studyDate: anInstance[0x00080020],\n        modalities: anInstance[0x00080061],\n        studyDescription: anInstance[0x00081030],\n        imageCount: anInstance[0x00201208],\n        studyInstanceUid: anInstance[0x0020000D],\n        institutionName: anInstance[0x00080080]\n    };\n\n    resultData.forEach(function(instanceRaw) {\n        const instance = instanceRaw.toObject();\n        const seriesInstanceUid = instance[0x0020000E];\n        let series = seriesMap[seriesInstanceUid];\n        if (!series) {\n            series = {\n                seriesDescription: instance[0x0008103E],\n                modality: instance[0x00080060],\n                seriesInstanceUid: seriesInstanceUid,\n                seriesNumber: parseFloat(instance[0x00200011]),\n                instances: []\n            };\n            seriesMap[seriesInstanceUid] = series;\n            seriesList.push(series);\n        }\n\n        const sopInstanceUid = instance[0x00080018];\n\n        const instanceSummary = {\n            imageType: instance[0x00080008],\n            sopClassUid: instance[0x00080016],\n            modality: instance[0x00080060],\n            sopInstanceUid: sopInstanceUid,\n            instanceNumber: parseFloat(instance[0x00200013]),\n            imagePositionPatient: instance[0x00200032],\n            imageOrientationPatient: instance[0x00200037],\n            frameOfReferenceUID: instance[0x00200052],\n            sliceThickness: parseFloat(instance[0x00180050]),\n            sliceLocation: parseFloat(instance[0x00201041]),\n            tablePosition: parseFloat(instance[0x00189327]),\n            samplesPerPixel: parseFloat(instance[0x00280002]),\n            photometricInterpretation: instance[0x00280004],\n            planarConfiguration: parseFloat(instance[0x00280006]),\n            rows: parseFloat(instance[0x00280010]),\n            columns: parseFloat(instance[0x00280011]),\n            pixelSpacing: instance[0x00280030],\n            bitsAllocated: parseFloat(instance[0x00280100]),\n            bitsStored: parseFloat(instance[0x00280101]),\n            highBit: parseFloat(instance[0x00280102]),\n            pixelRepresentation: parseFloat(instance[0x00280103]),\n            windowCenter: instance[0x00281050],\n            windowWidth: instance[0x00281051],\n            rescaleIntercept: parseFloat(instance[0x00281052]),\n            rescaleSlope: parseFloat(instance[0x00281053]),\n            sourceImageInstanceUid: getSourceImageInstanceUid(instance),\n            laterality: instance[0x00200062],\n            viewPosition: instance[0x00185101],\n            acquisitionDateTime: instance[0x0008002A],\n            numberOfFrames: parseFloat(instance[0x00280008]),\n            frameIncrementPointer: getValue(instance[0x00280009]),\n            frameTime: parseFloat(instance[0x00181063]),\n            frameTimeVector: parseFloatArray(instance[0x00181065]),\n            lossyImageCompression: instance[0x00282110],\n            derivationDescription: instance[0x00282111],\n            lossyImageCompressionRatio: instance[0x00282112],\n            lossyImageCompressionMethod: instance[0x00282114],\n            spacingBetweenSlices: instance[0x00180088],\n            echoNumber: instance[0x00180086],\n            contrastBolusAgent: instance[0x00180010]\n        };\n\n        // Retrieve the actual data over WADO-URI\n        const server = OHIF.servers.getCurrentServer();\n        const wadouri = `${server.wadoUriRoot}?requestType=WADO&studyUID=${studyInstanceUid}&seriesUID=${seriesInstanceUid}&objectUID=${sopInstanceUid}&contentType=application%2Fdicom`;\n        instanceSummary.wadouri = WADOProxy.convertURL(wadouri, server);\n\n        series.instances.push(instanceSummary);\n    });\n\n    studyData.studyInstanceUid = studyInstanceUid;\n\n    return studyData;\n}\n\n/**\n * Retrieved Study MetaData from a DICOM server using DIMSE\n * @param studyInstanceUid\n * @returns {{seriesList: Array, patientName: *, patientId: *, accessionNumber: *, studyDate: *, modalities: *, studyDescription: *, imageCount: *, studyInstanceUid: *}}\n */\nServices.DIMSE.RetrieveMetadata = function(studyInstanceUid) {\n    // TODO: Check which peer it should point to\n    const activeServer = OHIF.servers.getCurrentServer().peers[0];\n    const supportsInstanceRetrievalByStudyUid = activeServer.supportsInstanceRetrievalByStudyUid;\n    let results;\n\n    // Check explicitly for a value of false, since this property\n    // may be left undefined in config files\n    if (supportsInstanceRetrievalByStudyUid === false) {\n        results = DIMSE.retrieveInstancesByStudyOnly(studyInstanceUid);\n    } else {\n        results = DIMSE.retrieveInstances(studyInstanceUid);\n    }\n\n    return resultDataToStudyMetadata(studyInstanceUid, results);\n};\n","import { Meteor } from 'meteor/meteor';\nimport { OHIF } from 'meteor/ohif:core';\nimport { CurrentServer } from 'meteor/ohif:servers/both/collections';\n\nconst setupDIMSE = () => {\n    // Terminate existing DIMSE servers and sockets and clean up the connection object\n    DIMSE.connection.reset();\n\n    // Get the new server configuration\n    const server = OHIF.servers.getCurrentServer();\n\n    // Stop here if the new server is not of DIMSE type\n    if (server.type !== 'dimse') {\n        return;\n    }\n\n    // Check if peers were defined in the server configuration and throw an error if not\n    const peers = server.peers;\n    if (!peers || !peers.length) {\n        OHIF.log.error('dimse-config: ' + 'No DIMSE Peers provided.');\n        throw new Meteor.Error('dimse-config', 'No DIMSE Peers provided.');\n    }\n\n    // Add all the DIMSE peers, establishing the connections\n    OHIF.log.info('Adding DIMSE peers');\n    try {\n        peers.forEach(peer => DIMSE.connection.addPeer(peer));\n    } catch(error) {\n        OHIF.log.error('dimse-addPeers: ' + error);\n        throw new Meteor.Error('dimse-addPeers', error);\n    }\n};\n\n// Setup the DIMSE connections on startup or when the current server is changed\nMeteor.startup(() => {\n    CurrentServer.find().observe({\n        added: setupDIMSE,\n        changed: setupDIMSE\n    });\n});\n","import { OHIF } from 'meteor/ohif:core';\n\n/**\n * Parses resulting data from a QIDO call into a set of Study MetaData\n *\n * @param resultData\n * @returns {Array} An array of Study MetaData objects\n */\nfunction resultDataToStudies(resultData) {\n    var studies = [];\n\n    resultData.forEach(function(studyRaw) {\n        var study = studyRaw.toObject();\n        studies.push({\n            studyInstanceUid: study[0x0020000D],\n            // 00080005 = SpecificCharacterSet\n            studyDate: study[0x00080020],\n            studyTime: study[0x00080030],\n            accessionNumber: study[0x00080050],\n            referringPhysicianName: study[0x00080090],\n            // 00081190 = URL\n            patientName: study[0x00100010],\n            patientId: study[0x00100020],\n            patientBirthdate: study[0x00100030],\n            patientSex: study[0x00100040],\n            imageCount: study[0x00201208],\n            studyId: study[0x00200010],\n            studyDescription: study[0x00081030],\n            modalities: study[0x00080061]\n        });\n    });\n    return studies;\n}\n\nServices.DIMSE.Studies = function(filter) {\n    OHIF.log.info('Services.DIMSE.Studies');\n\n    let filterStudyDate = '';\n    if (filter.studyDateFrom && filter.studyDateTo) {\n        const convertDate = date => moment(date, 'MM/DD/YYYY').format('YYYYMMDD');\n        const dateFrom = convertDate(filter.studyDateFrom);\n        const dateTo = convertDate(filter.studyDateTo);\n        filterStudyDate = `${dateFrom}-${dateTo}`;\n    }\n\n    var parameters = {\n        0x00100010: filter.patientName,\n        0x00100020: filter.patientId,\n        0x00080050: filter.accessionNumber,\n        0x00080020: filterStudyDate,\n        0x00081030: filter.studyDescription,\n        0x00100040: '',\n        0x00201208: '',\n        0x00080061: filter.modalitiesInStudy\n    };\n\n    var results = DIMSE.retrieveStudies(parameters);\n    return resultDataToStudies(results);\n};\n","/**\n * Creates a QIDO URL given the server settings and a study instance UID\n * @param server\n * @param studyInstanceUid\n * @returns {string} URL to be used for QIDO calls\n */\nfunction buildUrl(server, studyInstanceUid) {\n    return server.qidoRoot + '/studies/' + studyInstanceUid + '/instances';\n}\n\n/**\n * Parses data returned from a QIDO search and transforms it into\n * an array of series that are present in the study\n *\n * @param server The DICOM server\n * @param studyInstanceUid\n * @param resultData\n * @returns {Array} Series List\n */\nfunction resultDataToStudyMetadata(server, studyInstanceUid, resultData) {\n    var seriesMap = {};\n    var seriesList = [];\n\n    resultData.forEach(function(instance) {\n        // Use seriesMap to cache series data\n        // If the series instance UID has already been used to\n        // process series data, continue using that series\n        var seriesInstanceUid = DICOMWeb.getString(instance['0020000E']);\n        var series = seriesMap[seriesInstanceUid];\n\n        // If no series data exists in the seriesMap cache variable,\n        // process any available series data\n        if (!series) {\n            series = {\n                seriesInstanceUid: seriesInstanceUid,\n                seriesNumber: DICOMWeb.getString(instance['00200011']),\n                instances: []\n            };\n\n            // Save this data in the seriesMap cache variable\n            seriesMap[seriesInstanceUid] = series;\n            seriesList.push(series);\n        }\n\n        // The uri for the dicomweb\n        // NOTE: DCM4CHEE seems to return the data zipped\n        // NOTE: Orthanc returns the data with multi-part mime which cornerstoneWADOImageLoader doesn't\n        //       know how to parse yet\n        //var uri = DICOMWeb.getString(instance['00081190']);\n        //uri = uri.replace('wado-rs', 'dicom-web');\n\n        // manually create a WADO-URI from the UIDs\n        // NOTE: Haven't been able to get Orthanc's WADO-URI to work yet - maybe its not configured?\n        var sopInstanceUid = DICOMWeb.getString(instance['00080018']);\n        var uri = server.wadoUriRoot + '?requestType=WADO&studyUID=' + studyInstanceUid + '&seriesUID=' + seriesInstanceUid + '&objectUID=' + sopInstanceUid + '&contentType=application%2Fdicom';\n\n        // Add this instance to the current series\n        series.instances.push({\n            sopClassUid: DICOMWeb.getString(instance['00080016']),\n            sopInstanceUid: sopInstanceUid,\n            uri: uri,\n            instanceNumber: DICOMWeb.getString(instance['00200013'])\n        });\n    });\n    return seriesList;\n}\n\n/**\n * Retrieve a set of instances using a QIDO call\n * @param server\n * @param studyInstanceUid\n * @returns {{wadoUriRoot: String, studyInstanceUid: String, seriesList: Array}}\n */\nServices.QIDO.Instances = function(server, studyInstanceUid) {\n    var url = buildUrl(server, studyInstanceUid);\n    var result = DICOMWeb.getJSON(url, server.requestOptions);\n\n    return {\n        wadoUriRoot: server.wadoUriRoot,\n        studyInstanceUid: studyInstanceUid,\n        seriesList: resultDataToStudyMetadata(server, studyInstanceUid, result.data)\n    };\n};\n","/**\n * Creates a QIDO date string for a date range query\n * Assumes the year is positive, at most 4 digits long.\n *\n * @param date The Date object to be formatted\n * @returns {string} The formatted date string\n */\nfunction dateToString(date) {\n    if(!date) return \"\";\n    var year = date.getFullYear().toString();\n    var month = (date.getMonth() + 1).toString();\n    var day = date.getDate().toString();\n    year = \"0\".repeat(4-year.length).concat(year);\n    month= \"0\".repeat(2-month.length).concat(month);\n    day = \"0\".repeat(2-day.length).concat(day);\n    return \"\".concat(year,month,day);\n}\n\n/**\n * Produces a QIDO URL given server details and a set of specified search filter\n * items\n *\n * @param server\n * @param filter\n * @returns {string} The URL with encoded filter query data\n */\nfunction filterToQIDOURL(server, filter) {\n    var commaSeparatedFields = [\n        '00081030', // Study Description\n        '00080060' //Modality\n        // Add more fields here if you want them in the Study List\n    ].join(',');\n\n    var parameters = {\n        PatientName: filter.patientName,\n        PatientID: filter.patientId,\n        AccessionNumber: filter.accessionNumber,\n        StudyDescription: filter.studyDescription,\n        ModalitiesInStudy: filter.modalitiesInStudy,\n        limit: filter.limit,\n        includefield: server.qidoSupportsIncludeField ? 'all' : commaSeparatedFields\n    };\n\n    // build the StudyDate range parameter\n    if (filter.studyDateFrom || filter.studyDateTo) {\n        var date = \"\".concat(dateToString(new Date(filter.studyDateFrom)), \"-\", dateToString(new Date(filter.studyDateTo)));\n        parameters.StudyDate = date;\n    }\n\n    return server.qidoRoot + '/studies?' + encodeQueryData(parameters);\n}\n\n/**\n * Parses resulting data from a QIDO call into a set of Study MetaData\n *\n * @param resultData\n * @returns {Array} An array of Study MetaData objects\n */\nfunction resultDataToStudies(resultData) {\n    var studies = [];\n\n    if (!resultData || !resultData.length) {\n        return;\n    }\n\n    resultData.forEach(function(study) {\n        studies.push({\n            studyInstanceUid: DICOMWeb.getString(study['0020000D']),\n            // 00080005 = SpecificCharacterSet\n            studyDate: DICOMWeb.getString(study['00080020']),\n            studyTime: DICOMWeb.getString(study['00080030']),\n            accessionNumber: DICOMWeb.getNumber(study['00080050']),\n            referringPhysicianName: DICOMWeb.getString(study['00080090']),\n            // 00081190 = URL\n            patientName: DICOMWeb.getName(study['00100010']),\n            patientId: DICOMWeb.getString(study['00100020']),\n            patientBirthdate: DICOMWeb.getString(study['00100030']),\n            patientSex: DICOMWeb.getString(study['00100040']),\n            studyId: DICOMWeb.getString(study['00200010']),\n            numberOfStudyRelatedSeries: DICOMWeb.getString(study['00201206']),\n            numberOfStudyRelatedInstances: DICOMWeb.getString(study['00201208']),\n            studyDescription: DICOMWeb.getString(study['00081030']),\n            // modality: DICOMWeb.getString(study['00080060']),\n            // modalitiesInStudy: DICOMWeb.getString(study['00080061']),\n            modalities: DICOMWeb.getString(DICOMWeb.getModalities(study['00080060'], study['00080061']))\n        });\n    });\n\n    return studies;\n}\n\nServices.QIDO.Studies = function(server, filter) {\n    var url = filterToQIDOURL(server, filter);\n    var result = DICOMWeb.getJSON(url, server.requestOptions);\n    return resultDataToStudies(result.data);\n};\n","import { remoteGetValue } from '../../lib/remoteGetValue';\r\n\r\n/**\r\n * Parses data returned from a QIDO search and transforms it into\r\n * an array of series that are present in the study\r\n *\r\n * @param server The DICOM server\r\n * @param studyInstanceUid\r\n * @param resultData\r\n * @returns {Array} Series List\r\n */\r\nfunction resultDataToStudyMetadata(server, studyInstanceUid, resultData) {\r\n    var seriesMap = {};\r\n    var seriesList = [];\r\n\r\n    resultData.forEach(function(instance) {\r\n        // Use seriesMap to cache series data\r\n        // If the series instance UID has already been used to\r\n        // process series data, continue using that series\r\n        var seriesInstanceUid = remoteGetValue(instance['0020,000e']);\r\n        var series = seriesMap[seriesInstanceUid];\r\n\r\n        // If no series data exists in the seriesMap cache variable,\r\n        // process any available series data\r\n        if(!series) {\r\n            series = {\r\n                seriesInstanceUid : seriesInstanceUid,\r\n                seriesNumber : parseFloat(remoteGetValue(instance['0020,0011'])),\r\n                instances: []\r\n            };\r\n\r\n            // Save this data in the seriesMap cache variable\r\n            seriesMap[seriesInstanceUid] = series;\r\n            seriesList.push(series);\r\n        }\r\n\r\n        // The uri for the dicomweb\r\n        // NOTE: DCM4CHEE seems to return the data zipped\r\n        // NOTE: Orthanc returns the data with multi-part mime which cornerstoneWADOImageLoader doesn't\r\n        //       know how to parse yet\r\n        //var uri = DICOMWeb.getString(instance['00081190']);\r\n        //uri = uri.replace('wado-rs', 'dicom-web');\r\n\r\n        // manually create a WADO-URI from the UIDs\r\n        // NOTE: Haven't been able to get Orthanc's WADO-URI to work yet - maybe its not configured?\r\n        var sopInstanceUid = remoteGetValue(instance['0008,0018']);\r\n        var uri = server.wadoUriRoot + '?requestType=WADO&studyUID=' + studyInstanceUid + '&seriesUID=' + seriesInstanceUid + '&objectUID=' + sopInstanceUid + \"&contentType=application%2Fdicom\";\r\n\r\n        // Add this instance to the current series\r\n        series.instances.push({\r\n            sopClassUid: remoteGetValue(instance['0008,0016']),\r\n            sopInstanceUid: sopInstanceUid,\r\n            uri: uri,\r\n            instanceNumber: parseFloat(remoteGetValue(instance['0020,0013']))\r\n        });\r\n  });\r\n  return seriesList;\r\n}\r\n\r\n/**\r\n * Retrieve a set of instances using a QIDO call\r\n * @param server\r\n * @param studyInstanceUid\r\n * @returns {{wadoUriRoot: String, studyInstanceUid: String, seriesList: Array}}\r\n */\r\nServices.REMOTE.Instances = function(server, studyInstanceUid) {\r\n    var parameters = {\r\n        PatientName: \"\",\r\n        PatientID: \"\",\r\n        AccessionNumber: \"\",\r\n        SeriesInstanceUID: \"\",\r\n        SeriesNumber : \"\",\r\n        SOPClassUID : \"\",\r\n        InstanceNumber : \"\"\r\n    };\r\n\r\n    var remote = new OrthancRemote(server.root, server.sourceAE);\r\n\r\n    return {\r\n        wadoUriRoot: server.wadoUriRoot,\r\n        studyInstanceUid: studyInstanceUid,\r\n        seriesList: resultDataToStudyMetadata(server, studyInstanceUid, remote.findInstances(server.modality, studyInstanceUid, null, parameters))\r\n    };\r\n};","import { remoteGetValue } from '../../lib/remoteGetValue';\r\nimport { parseFloatArray } from '../../lib/parseFloatArray';\r\n\r\n/**\r\n * Parses the SourceImageSequence, if it exists, in order\r\n * to return a ReferenceSOPInstanceUID. The ReferenceSOPInstanceUID\r\n * is used to refer to this image in any accompanying DICOM-SR documents.\r\n *\r\n * @param instance\r\n * @returns {String} The ReferenceSOPInstanceUID\r\n */\r\nfunction getSourceImageInstanceUid(instance) {\r\n    // TODO= Parse the whole Source Image Sequence\r\n    // This is a really poor workaround for now.\r\n    // Later we should probably parse the whole sequence.\r\n    var SourceImageSequence = remoteGetValue(instance['0008,2112']);\r\n    if (SourceImageSequence && SourceImageSequence.Value && SourceImageSequence.Value.length) {\r\n        return SourceImageSequence.Value[0]['0008,1155'].Value[0];\r\n    }\r\n}\r\n\r\n/**\r\n * Parses result data from a WADO search into Study MetaData\r\n * Returns an object populated with study metadata, including the\r\n * series list.\r\n *\r\n * @param server\r\n * @param studyInstanceUid\r\n * @param resultData\r\n * @returns {{seriesList: Array, patientName: *, patientId: *, accessionNumber: *, studyDate: *, modalities: *, studyDescription: *, imageCount: *, studyInstanceUid: *}}\r\n */\r\nfunction resultDataToStudyMetadata(server, studyInstanceUid, resultData) {\r\n    var seriesMap = {};\r\n    var seriesList = [];\r\n\r\n    if (!resultData.length) {\r\n        return;\r\n    }\r\n\r\n    var anInstance = resultData[0];\r\n    if (!anInstance) {\r\n        return;\r\n    }\r\n\r\n    var studyData = {\r\n        seriesList: seriesList,\r\n        patientName: remoteGetValue(anInstance['0010,0010']),\r\n        patientId: remoteGetValue(anInstance['0010,0020']),\r\n        accessionNumber: remoteGetValue(anInstance['0008,0050']),\r\n        studyDate: remoteGetValue(anInstance['0008,0020']),\r\n        modalities: remoteGetValue(anInstance['0008,0061']),\r\n        studyDescription: remoteGetValue(anInstance['0008,1030']),\r\n        imageCount: remoteGetValue(anInstance['0020,1208']),\r\n        studyInstanceUid: remoteGetValue(anInstance['0020,000d'])\r\n    };\r\n\r\n    resultData.forEach(function(instance) {\r\n        var seriesInstanceUid = remoteGetValue(instance['0020,000e']);\r\n        var series = seriesMap[seriesInstanceUid];\r\n        if (!series) {\r\n            series = {\r\n                seriesDescription: remoteGetValue(instance['0008,103e']),\r\n                modality: remoteGetValue(instance['0008,0060']),\r\n                seriesInstanceUid: seriesInstanceUid,\r\n                seriesNumber: parseFloat(remoteGetValue(instance['0020,0011'])),\r\n                instances: []\r\n            };\r\n            seriesMap[seriesInstanceUid] = series;\r\n            seriesList.push(series);\r\n        }\r\n\r\n        var sopInstanceUid = remoteGetValue(instance['0008,0018']);\r\n\r\n        var instanceSummary = {\r\n            imageType: remoteGetValue(instance['0008,0008']),\r\n            sopClassUid: remoteGetValue(instance['0008,0016']),\r\n            sopInstanceUid: sopInstanceUid,\r\n            instanceNumber: parseFloat(remoteGetValue(instance['0020,0013'])),\r\n            imagePositionPatient: remoteGetValue(instance['0020,0032']),\r\n            imageOrientationPatient: remoteGetValue(instance['0020,0037']),\r\n            frameOfReferenceUID: remoteGetValue(instance['0020,0052']),\r\n            sliceLocation: parseFloat(remoteGetValue(instance['0020,1041'])),\r\n            samplesPerPixel: parseFloat(remoteGetValue(instance['0028,0002'])),\r\n            photometricInterpretation: remoteGetValue(instance['0028,0004']),\r\n            rows: parseFloat(remoteGetValue(instance['0028,0010'])),\r\n            columns: parseFloat(remoteGetValue(instance['0028,0011'])),\r\n            pixelSpacing: remoteGetValue(instance['0028,0030']),\r\n            bitsAllocated: parseFloat(remoteGetValue(instance['0028,0100'])),\r\n            bitsStored: parseFloat(remoteGetValue(instance['0028,0101'])),\r\n            highBit: parseFloat(remoteGetValue(instance['0028,0102'])),\r\n            pixelRepresentation: parseFloat(remoteGetValue(instance['0028,0103'])),\r\n            windowCenter: remoteGetValue(instance['0028,1050']),\r\n            windowWidth: remoteGetValue(instance['0028,1051']),\r\n            rescaleIntercept: parseFloat(remoteGetValue(instance['0028,1052'])),\r\n            rescaleSlope: parseFloat(remoteGetValue(instance['0028,1053'])),\r\n            sourceImageInstanceUid: getSourceImageInstanceUid(instance),\r\n            laterality: remoteGetValue(instance['0020,0062']),\r\n            viewPosition: remoteGetValue(instance['0018,5101']),\r\n            acquisitionDateTime: remoteGetValue(instance['0008,002A']),\r\n            numberOfFrames: parseFloat(remoteGetValue(instance['0028,0008'])),\r\n            frameIncrementPointer: remoteGetValue(instance['0028,0009']),\r\n            frameTime: parseFloat(remoteGetValue(instance['0018,1063'])),\r\n            frameTimeVector: parseFloatArray(remoteGetValue(instance['0018,1065'])),\r\n            echoNumber: remoteGetValue(instance['0018,0086']),\r\n            contrastBolusAgent: remoteGetValue(instance['0018,0010'])\r\n        };\r\n\r\n        var iid = instance['xxxx,0001'].Value;\r\n        if (server.imageRendering === 'wadouri') {\r\n            instanceSummary.wadouri = server.wadoUriRoot + '?requestType=WADO&studyUID=' + studyInstanceUid + '&seriesUID=' + seriesInstanceUid + '&objectUID=' + sopInstanceUid + \"&contentType=application%2Fdicom\";\r\n        } else if (server.imageRendering == 'orthanc') {\r\n            instanceSummary.wadouri = server.root + '/instances/' + iid + '/file';\r\n        } else {\r\n            instanceSummary.wadorsuri = server.wadoRoot + '/studies/' + studyInstanceUid + '/series/' + seriesInstanceUid + '/instances/' + sopInstanceUid + '/frames/1';\r\n        }\r\n\r\n        series.instances.push(instanceSummary);\r\n    });\r\nconsole.log(studyData.seriesList[0].instances);\r\n    return studyData;\r\n}\r\n\r\n/**\r\n * Retrieved Study MetaData from a DICOM server using a WADO call\r\n * @param server\r\n * @param studyInstanceUid\r\n * @returns {{seriesList: Array, patientName: *, patientId: *, accessionNumber: *, studyDate: *, modalities: *, studyDescription: *, imageCount: *, studyInstanceUid: *}}\r\n */\r\nServices.REMOTE.RetrieveMetadata = function(server, studyInstanceUid) {\r\n    var remote = new OrthancRemote(server.root, server.sourceAE);\r\n\r\n    var study = resultDataToStudyMetadata(server, studyInstanceUid, remote.retrieveMetadata(server.modality, studyInstanceUid));\r\n    if (!study) {\r\n       study = {};\r\n    }\r\n\r\n    study.wadoUriRoot = server.wadoUriRoot;\r\n    study.studyInstanceUid = studyInstanceUid;\r\n\r\n    return study;\r\n};","import { remoteGetValue } from '../../lib/remoteGetValue';\r\n\r\nfunction resultDataToStudies(resultData) {\r\n  var studies = [];\r\n\r\n  resultData.forEach(function(study) {\r\n    studies.push({\r\n      studyInstanceUid: remoteGetValue(study['0020,000d']),\r\n      // 00080005 = SpecificCharacterSet\r\n      studyDate: remoteGetValue(study['0008,0020']),\r\n      studyTime: remoteGetValue(study['0008,0030']),\r\n      accessionNumber: remoteGetValue(study['0008,0050']),\r\n      referringPhysicianName: remoteGetValue(study['0008,0090']),\r\n      // 00081190 = URL\r\n      patientName: remoteGetValue(study['0010,0010']),\r\n      patientId: remoteGetValue(study['0010,0020']),\r\n      patientBirthdate: remoteGetValue(study['0010,0030']),\r\n      patientSex: remoteGetValue(study['0010,0040']),\r\n      studyId: remoteGetValue(study['0020,0010']),\r\n      numberOfStudyRelatedSeries: parseFloat(remoteGetValue(study['0020,1206'])),\r\n      numberOfStudyRelatedInstances: parseFloat(remoteGetValue(study['0020,1208'])),\r\n      studyDescription: remoteGetValue(study['0008,1030']),\r\n      modalities: remoteGetValue(study['0008,0061'])\r\n    });\r\n  });\r\n  return studies;\r\n}\r\n\r\nServices.REMOTE.Studies = function(server, filter) {\r\n    var parameters = {\r\n        PatientName: filter.patientName ? filter.patientName : \"\",\r\n        PatientID: filter.patientId,\r\n        AccessionNumber: filter.accessionNumber ? filter.accessionNumber : \"\",\r\n        StudyDescription: \"\",\r\n        StudyDate : \"\",\r\n        StudyTime : \"\",\r\n        ReferringPhysicianName : \"\",\r\n        PatientBirthDate : \"\",\r\n        PatientSex : \"\",\r\n        StudyID : \"\",\r\n        NumberOfStudyRelatedSeries : \"\",\r\n        NumberOfStudyRelatedInstances : \"\",\r\n        ModalitiesInStudy : \"\"\r\n    };\r\n    var remote = new OrthancRemote(server.root, server.sourceAE);\r\n    var data = remote.findStudies(server.modality, parameters);\r\n\r\n    return resultDataToStudies(data.results);\r\n};","import { parseFloatArray } from '../../lib/parseFloatArray';\n\n/**\n * Simple cache schema for retrieved color palettes.\n */\nconst paletteColorCache = {\n    count: 0,\n    maxAge: 24 * 60 * 60 * 1000, // 24h cache?\n    entries: {},\n    isValidUID: function (paletteUID) {\n        return typeof paletteUID === 'string' && paletteUID.length > 0;\n    },\n    get: function (paletteUID) {\n        let entry = null;\n        if (this.entries.hasOwnProperty(paletteUID)) {\n            entry = this.entries[paletteUID];\n            // check how the entry is...\n            if ((Date.now() - entry.time) > this.maxAge) {\n                // entry is too old... remove entry.\n                delete this.entries[paletteUID];\n                this.count--;\n                entry = null;\n            }\n        }\n        return entry;\n    },\n    add: function (entry) {\n        if (this.isValidUID(entry.uid)) {\n            let paletteUID = entry.uid;\n            if (this.entries.hasOwnProperty(paletteUID) !== true) {\n                this.count++; // increment cache entry count...\n            }\n            entry.time = Date.now();\n            this.entries[paletteUID] = entry;\n            // @TODO: Add logic to get rid of old entries and reduce memory usage...\n        }\n    }\n};\n\n/**\n * Creates a URL for a WADO search\n *\n * @param server\n * @param studyInstanceUid\n * @returns {string}\n */\nfunction buildUrl(server, studyInstanceUid) {\n    return server.wadoRoot + '/studies/' + studyInstanceUid + '/metadata';\n}\n\n/** Returns a WADO url for an instance\n *\n * @param studyInstanceUid\n * @param seriesInstanceUid\n * @param sopInstanceUid\n * @returns  {string}\n */\nfunction buildInstanceWadoUrl(server, studyInstanceUid, seriesInstanceUid, sopInstanceUid) {\n    const params = [];\n\n    params.push('requestType=WADO');\n    params.push(`studyUID=${studyInstanceUid}`);\n    params.push(`seriesUID=${seriesInstanceUid}`);\n    params.push(`objectUID=${sopInstanceUid}`);\n    params.push('contentType=application%2Fdicom');\n    params.push('transferSyntax=*');\n\n    return `${server.wadoUriRoot}?${params.join('&')}`;\n}\n\nfunction buildInstanceWadoRsUri(server, studyInstanceUid, seriesInstanceUid, sopInstanceUid) {\n    return `${server.wadoRoot}/studies/${studyInstanceUid}/series/${seriesInstanceUid}/instances/${sopInstanceUid}`\n}\n\nfunction buildInstanceFrameWadoRsUri(server, studyInstanceUid, seriesInstanceUid, sopInstanceUid, frame) {\n    const baseWadoRsUri = buildInstanceWadoRsUri(server, studyInstanceUid, seriesInstanceUid, sopInstanceUid);\n    frame = frame != null || 1;\n\n    return `${baseWadoRsUri}/frames/${frame}`\n}\n\n/**\n * Parses the SourceImageSequence, if it exists, in order\n * to return a ReferenceSOPInstanceUID. The ReferenceSOPInstanceUID\n * is used to refer to this image in any accompanying DICOM-SR documents.\n *\n * @param instance\n * @returns {String} The ReferenceSOPInstanceUID\n */\nfunction getSourceImageInstanceUid(instance) {\n    // TODO= Parse the whole Source Image Sequence\n    // This is a really poor workaround for now.\n    // Later we should probably parse the whole sequence.\n    var SourceImageSequence = instance['00082112'];\n    if (SourceImageSequence && SourceImageSequence.Value && SourceImageSequence.Value.length) {\n        return SourceImageSequence.Value[0]['00081155'].Value[0];\n    }\n}\n\nfunction getPaletteColor(server, instance, tag, lutDescriptor) {\n    const lut = [];\n    const numLutEntries = lutDescriptor[0];\n    const bits = lutDescriptor[2];\n    const uri = WADOProxy.convertURL(instance[tag].BulkDataURI, server)\n    const data = DICOMWeb.getBulkData(uri);\n\n    for (var i = 0; i < numLutEntries; i++) {\n        if(bits === 16) {\n            lut[i] = data.readUInt16LE(i*2);\n        } else {\n            lut[i] = data.readUInt8(i);\n        }\n    }\n\n    return lut;\n}\n\n/**\n * Fetch palette colors for instances with \"PALETTE COLOR\" photometricInterpretation.\n *\n * @param server {Object} Current server;\n * @param instance {Object} The retrieved instance metadata;\n * @returns {String} The ReferenceSOPInstanceUID\n */\nfunction getPaletteColors(server, instance, lutDescriptor) {\n\n    let entry = null,\n        paletteUID = DICOMWeb.getString(instance['00281199']);\n\n    if (paletteColorCache.isValidUID(paletteUID)) {\n        entry = paletteColorCache.get(paletteUID);\n    } else {\n        paletteUID = null;\n    }\n\n    if (!entry) {\n        // no entry on cache... Fetch remote data.\n        try {\n            let r, g, b;\n            r = getPaletteColor(server, instance, '00281201', lutDescriptor);\n            g = getPaletteColor(server, instance, '00281202', lutDescriptor);;\n            b = getPaletteColor(server, instance, '00281203', lutDescriptor);;\n\n            entry = { red: r, green: g, blue: b };\n            if (paletteUID !== null) {\n                // when paletteUID is present, the entry can be cached...\n                entry.uid = paletteUID;\n                paletteColorCache.add(entry);\n            }\n        } catch (error) {\n            console.log(`(${error.name}) ${error.message}`);\n        }\n    }\n\n    return entry;\n\n}\n\nfunction getFrameIncrementPointer(element) {\n    const frameIncrementPointerNames = {\n        '00181065': 'frameTimeVector',\n        '00181063': 'frameTime'\n    };\n\n    if(!element || !element.Value || !element.Value.length) {\n        return;\n    }\n\n    const value = element.Value[0];\n    return frameIncrementPointerNames[value];\n}\n\nfunction getRadiopharmaceuticalInfo(instance) {\n    const modality = DICOMWeb.getString(instance['00080060']);\n\n    if (modality !== 'PT') {\n        return;\n    }\n\n    const radiopharmaceuticalInfo = instance['00540016'];\n    if ((radiopharmaceuticalInfo === undefined) || !radiopharmaceuticalInfo.Value || !radiopharmaceuticalInfo.Value.length) {\n        return;\n    }\n\n    const firstPetRadiopharmaceuticalInfo = radiopharmaceuticalInfo.Value[0];\n    return {\n        radiopharmaceuticalStartTime: DICOMWeb.getString(firstPetRadiopharmaceuticalInfo['00181072']),\n        radionuclideTotalDose: DICOMWeb.getNumber(firstPetRadiopharmaceuticalInfo['00181074']),\n        radionuclideHalfLife: DICOMWeb.getNumber(firstPetRadiopharmaceuticalInfo['00181075'])\n    };\n}\n\n/**\n * Parses result data from a WADO search into Study MetaData\n * Returns an object populated with study metadata, including the\n * series list.\n *\n * @param server\n * @param studyInstanceUid\n * @param resultData\n * @returns {{seriesList: Array, patientName: *, patientId: *, accessionNumber: *, studyDate: *, modalities: *, studyDescription: *, imageCount: *, studyInstanceUid: *}}\n */\nfunction resultDataToStudyMetadata(server, studyInstanceUid, resultData) {\n    var seriesMap = {};\n    var seriesList = [];\n\n    if (!resultData.length) {\n        return;\n    }\n\n    var anInstance = resultData[0];\n    if (!anInstance) {\n        return;\n    }\n\n    var studyData = {\n        seriesList: seriesList,\n        patientName: DICOMWeb.getName(anInstance['00100010']),\n        patientId: DICOMWeb.getString(anInstance['00100020']),\n        patientAge: DICOMWeb.getNumber(anInstance['00101010']),\n        patientSize: DICOMWeb.getNumber(anInstance['00101020']),\n        patientWeight: DICOMWeb.getNumber(anInstance['00101030']),\n        accessionNumber: DICOMWeb.getString(anInstance['00080050']),\n        studyDate: DICOMWeb.getString(anInstance['00080020']),\n        modalities: DICOMWeb.getString(anInstance['00080061']),\n        studyDescription: DICOMWeb.getString(anInstance['00081030']),\n        imageCount: DICOMWeb.getString(anInstance['00201208']),\n        studyInstanceUid: DICOMWeb.getString(anInstance['0020000D']),\n        institutionName: DICOMWeb.getString(anInstance['00080080'])\n    };\n\n    resultData.forEach(function(instance) {\n        var seriesInstanceUid = DICOMWeb.getString(instance['0020000E']);\n        var series = seriesMap[seriesInstanceUid];\n        if (!series) {\n            series = {\n                seriesDescription: DICOMWeb.getString(instance['0008103E']),\n                modality: DICOMWeb.getString(instance['00080060']),\n                seriesInstanceUid: seriesInstanceUid,\n                seriesNumber: DICOMWeb.getNumber(instance['00200011']),\n                seriesDate: DICOMWeb.getString(instance['00080021']),\n                seriesTime: DICOMWeb.getString(instance['00080031']),\n                instances: []\n            };\n            seriesMap[seriesInstanceUid] = series;\n            seriesList.push(series);\n        }\n\n        var sopInstanceUid = DICOMWeb.getString(instance['00080018']);\n\n        const wadouri = buildInstanceWadoUrl(server, studyInstanceUid, seriesInstanceUid, sopInstanceUid);\n        const baseWadoRsUri = buildInstanceWadoRsUri(server, studyInstanceUid, seriesInstanceUid, sopInstanceUid);\n        const wadorsuri = buildInstanceFrameWadoRsUri(server, studyInstanceUid, seriesInstanceUid, sopInstanceUid);\n\n        var instanceSummary = {\n            imageType: DICOMWeb.getString(instance['00080008']),\n            sopClassUid: DICOMWeb.getString(instance['00080016']),\n            modality: DICOMWeb.getString(instance['00080060']),\n            sopInstanceUid: sopInstanceUid,\n            instanceNumber: DICOMWeb.getNumber(instance['00200013']),\n            imagePositionPatient: DICOMWeb.getString(instance['00200032']),\n            imageOrientationPatient: DICOMWeb.getString(instance['00200037']),\n            frameOfReferenceUID: DICOMWeb.getString(instance['00200052']),\n            sliceLocation: DICOMWeb.getNumber(instance['00201041']),\n            samplesPerPixel: DICOMWeb.getNumber(instance['00280002']),\n            photometricInterpretation: DICOMWeb.getString(instance['00280004']),\n            planarConfiguration: DICOMWeb.getNumber(instance['00280006']),\n            rows: DICOMWeb.getNumber(instance['00280010']),\n            columns: DICOMWeb.getNumber(instance['00280011']),\n            pixelSpacing: DICOMWeb.getString(instance['00280030']),\n            pixelAspectRatio: DICOMWeb.getString(instance['00280034']),\n            bitsAllocated: DICOMWeb.getNumber(instance['00280100']),\n            bitsStored: DICOMWeb.getNumber(instance['00280101']),\n            highBit: DICOMWeb.getNumber(instance['00280102']),\n            pixelRepresentation: DICOMWeb.getNumber(instance['00280103']),\n            smallestPixelValue: DICOMWeb.getNumber(instance['00280106']),\n            largestPixelValue: DICOMWeb.getNumber(instance['00280107']),\n            windowCenter: DICOMWeb.getString(instance['00281050']),\n            windowWidth: DICOMWeb.getString(instance['00281051']),\n            rescaleIntercept: DICOMWeb.getNumber(instance['00281052']),\n            rescaleSlope: DICOMWeb.getNumber(instance['00281053']),\n            rescaleType: DICOMWeb.getNumber(instance['00281054']),\n            sourceImageInstanceUid: getSourceImageInstanceUid(instance),\n            laterality: DICOMWeb.getString(instance['00200062']),\n            viewPosition: DICOMWeb.getString(instance['00185101']),\n            acquisitionDateTime: DICOMWeb.getString(instance['0008002A']),\n            numberOfFrames: DICOMWeb.getNumber(instance['00280008']),\n            frameIncrementPointer: getFrameIncrementPointer(instance['00280009']),\n            frameTime: DICOMWeb.getNumber(instance['00181063']),\n            frameTimeVector: parseFloatArray(DICOMWeb.getString(instance['00181065'])),\n            sliceThickness: DICOMWeb.getNumber(instance['00180050']),\n            lossyImageCompression: DICOMWeb.getString(instance['00282110']),\n            derivationDescription: DICOMWeb.getString(instance['00282111']),\n            lossyImageCompressionRatio: DICOMWeb.getString(instance['00282112']),\n            lossyImageCompressionMethod: DICOMWeb.getString(instance['00282114']),\n            echoNumber: DICOMWeb.getString(instance['00180086']),\n            contrastBolusAgent: DICOMWeb.getString(instance['00180010']),\n            radiopharmaceuticalInfo: getRadiopharmaceuticalInfo(instance),\n            baseWadoRsUri: baseWadoRsUri,\n            wadouri: WADOProxy.convertURL(wadouri, server),\n            wadorsuri: WADOProxy.convertURL(wadorsuri, server),\n            imageRendering: server.imageRendering,\n            thumbnailRendering: server.thumbnailRendering\n        };\n\n        // Get additional information if the instance uses \"PALETTE COLOR\" photometric interpretation\n        if (instanceSummary.photometricInterpretation === 'PALETTE COLOR') {\n            const redPaletteColorLookupTableDescriptor = parseFloatArray(DICOMWeb.getString(instance['00281101']));\n            const greenPaletteColorLookupTableDescriptor = parseFloatArray(DICOMWeb.getString(instance['00281102']));\n            const bluePaletteColorLookupTableDescriptor = parseFloatArray(DICOMWeb.getString(instance['00281103']));\n            const palettes = getPaletteColors(server, instance, redPaletteColorLookupTableDescriptor);\n\n            if (palettes) {\n                if (palettes.uid) {\n                    instanceSummary.paletteColorLookupTableUID = palettes.uid;\n                }\n                instanceSummary.redPaletteColorLookupTableData = palettes.red;\n                instanceSummary.greenPaletteColorLookupTableData = palettes.green;\n                instanceSummary.bluePaletteColorLookupTableData = palettes.blue;\n                instanceSummary.redPaletteColorLookupTableDescriptor = redPaletteColorLookupTableDescriptor;\n                instanceSummary.greenPaletteColorLookupTableDescriptor = greenPaletteColorLookupTableDescriptor;\n                instanceSummary.bluePaletteColorLookupTableDescriptor = bluePaletteColorLookupTableDescriptor;\n            }\n        }\n\n        series.instances.push(instanceSummary);\n\n    });\n\n    return studyData;\n}\n\n/**\n * Retrieved Study MetaData from a DICOM server using a WADO call\n * @param server\n * @param studyInstanceUid\n * @returns {{seriesList: Array, patientName: *, patientId: *, accessionNumber: *, studyDate: *, modalities: *, studyDescription: *, imageCount: *, studyInstanceUid: *}}\n */\nServices.WADO.RetrieveMetadata = function(server, studyInstanceUid) {\n    var url = buildUrl(server, studyInstanceUid);\n\n    var result = DICOMWeb.getJSON(url, server.requestOptions);\n\n    var study = resultDataToStudyMetadata(server, studyInstanceUid, result.data);\n    if (!study) {\n        study = {};\n    }\n\n    study.wadoUriRoot = server.wadoUriRoot;\n    study.studyInstanceUid = studyInstanceUid;\n\n    return study;\n};\n"]}