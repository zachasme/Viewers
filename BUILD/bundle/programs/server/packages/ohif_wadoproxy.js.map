{"version":3,"sources":["meteor://ðŸ’»app/packages/ohif:wadoproxy/server/namespace.js","meteor://ðŸ’»app/packages/ohif:wadoproxy/server/initialize.js","meteor://ðŸ’»app/packages/ohif:wadoproxy/server/routes.js","meteor://ðŸ’»app/packages/ohif:wadoproxy/server/convertURL.js"],"names":["WADOProxy","Meteor","module","watch","require","v","OHIF","Settings","Object","assign","uri","utils","absoluteUrl","enabled","settings","proxy","Router","Accounts","Servers","url","http","https","now","doAuth","users","find","count","authenticateUser","userId","request","headers","loginToken","hashedToken","_hashLoginToken","findOne","_id","route","replace","response","params","start","user","writeHead","end","authenticationTime","server","query","serverId","requestOpt","requestOptions","wadoUrl","logRequests","console","log","logTiming","time","parsed","parse","options","method","hostname","path","requester","protocol","allowUnauthorizedAgent","Agent","rejectUnauthorized","agent","port","keys","forEach","value","entry","auth","prepRequestTime","proxyRequest","proxyReqTime","totalProxyTime","serverTimingHeaders","proxyResponse","statusCode","timeEnd","pipe","on","error","message","where","querystring","convertURL","serverConfiguration","stringify"],"mappings":"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","file":"/packages/ohif_wadoproxy.js","sourcesContent":["WADOProxy = {};","import { Meteor } from 'meteor/meteor';\r\nimport { OHIF } from 'meteor/ohif:core';\r\n\r\nSettings = Object.assign({\r\n    uri : OHIF.utils.absoluteUrl(\"/__wado_proxy\"),\r\n    enabled: true\r\n}, (Meteor.settings && Meteor.settings.proxy) ? Meteor.settings.proxy : {});","import { Meteor } from 'meteor/meteor';\nimport { Router } from 'meteor/iron:router';\nimport { Accounts } from 'meteor/accounts-base';\nimport { OHIF } from 'meteor/ohif:core';\nimport { Servers } from 'meteor/ohif:servers/both/collections';\n\nconst url = require('url');\nconst http = require('http');\nconst https = require('https');\nconst now = require('performance-now');\n\nconst doAuth = Meteor.users.find().count() ? true : false;\n\nconst authenticateUser = request => {\n    // Only allow logged-in users to access this route\n    const userId = request.headers['x-user-id'];\n    const loginToken = request.headers['x-auth-token'];\n    if (!userId || !loginToken) {\n        return;\n    }\n\n    const hashedToken = Accounts._hashLoginToken(loginToken);\n\n    return Meteor.users.findOne({\n        _id: userId,\n        'services.resume.loginTokens.hashedToken': hashedToken\n    });\n};\n\n// Setup a Route using Iron Router to avoid Cross-origin resource sharing\n// (CORS) errors. We only handle this route on the Server.\nRouter.route(Settings.uri.replace(OHIF.utils.absoluteUrl(), ''), function() {\n    const request = this.request;\n    const response = this.response;\n    const params = this.params;\n\n    let start = now();\n    let user;\n    if (doAuth) {\n        user = authenticateUser(request);\n        if (!user) {\n            response.writeHead(401);\n            response.end('Error: You must be logged in to perform this action.\\n');\n            return;\n        }\n    }\n\n    let end = now();\n    const authenticationTime = end - start;\n\n    start = now();\n\n    const server = Servers.findOne(params.query.serverId);\n    if (!server) {\n        response.writeHead(500);\n        response.end('Error: No Server with the specified Server ID was found.\\n');\n        return;\n    }\n\n    const requestOpt = server.requestOptions;\n\n    // If no Web Access to DICOM Objects (WADO) Service URL is provided\n    // return an error for the request.\n    const wadoUrl = params.query.url;\n    if (!wadoUrl) {\n        response.writeHead(500);\n        response.end('Error: No WADO URL was provided.\\n');\n        return;\n    }\n\n    if (requestOpt.logRequests) {\n        console.log(request.url);\n    }\n\n    start = now();\n    if (requestOpt.logTiming) {\n        console.time(request.url);\n    }\n\n    // Use Node's URL parse to decode the query URL\n    const parsed = url.parse(wadoUrl);\n\n    // Create an object to hold the information required\n    // for the request to the PACS.\n    let options = {\n        headers: {},\n        method: request.method,\n        hostname: parsed.hostname,\n        path: parsed.path\n    };\n\n    let requester;\n    if (parsed.protocol === 'https:') {\n        requester = https.request;\n\n        const allowUnauthorizedAgent = new https.Agent({ rejectUnauthorized: false });\n        options.agent = allowUnauthorizedAgent;\n    } else {\n        requester = http.request;\n    }\n\n    if (parsed.port) {\n        options.port = parsed.port;\n    }\n\n    Object.keys(request.headers).forEach(entry => {\n        const value = request.headers[entry];\n        if (entry) {\n            options.headers[entry] = value;\n        }\n    });\n\n    // Retrieve the authorization user:password string for the PACS,\n    // if one is required, and include it in the request to the PACS.\n    if (requestOpt.auth) {\n        options.auth = requestOpt.auth;\n    }\n\n    end = now();\n    const prepRequestTime = end - start;\n\n    // Use Node's HTTP API to send a request to the PACS\n    const proxyRequest = requester(options, proxyResponse => {\n        // When we receive data from the PACS, stream it as the\n        // response to the original request.\n        // console.log(`Got response: ${proxyResponse.statusCode}`);\n        end = now();\n        const proxyReqTime = end - start;\n        const totalProxyTime = authenticationTime + prepRequestTime + proxyReqTime;\n        const serverTimingHeaders = `\n            auth=${authenticationTime}; \"Authenticate User\",\n            prep-req=${prepRequestTime}; \"Prepare Request Headers\",\n            proxy-req=${proxyReqTime}; \"Request to WADO URI\",\n            total-proxy=${totalProxyTime}; \"Total\",\n        `.replace(/\\n/g, '');\n\n        proxyResponse.headers['Server-Timing'] = serverTimingHeaders;\n\n        response.writeHead(proxyResponse.statusCode, proxyResponse.headers);\n\n        if (requestOpt.logTiming) {\n            console.timeEnd(request.url);\n        }\n\n        return proxyResponse.pipe(response, { end: true });\n    });\n\n    // If our request to the PACS fails, log the error message\n    proxyRequest.on('error', error => {\n        end = now();\n        const proxyReqTime = end - start;\n        const totalProxyTime = authenticationTime + prepRequestTime + proxyReqTime;\n        console.timeEnd(request.url);\n        const serverTimingHeaders = {\n            'Server-Timing': `\n                auth=${authenticationTime}; \"Authenticate User\",\n                prep-req=${prepRequestTime}; \"Prepare Request Headers\",\n                proxy-req=${proxyReqTime}; \"Request to WADO URI\",\n                total-proxy=${totalProxyTime}; \"Total\",\n            `.replace(/\\n/g, '')\n        };\n\n        response.writeHead(500, serverTimingHeaders);\n        response.end(`Error: Problem with request to PACS: ${error.message}\\n`);\n    });\n\n    // Stream the original request information into the request\n    // to the PACS\n    request.pipe(proxyRequest);\n}, {\n    where: 'server'\n});\n","const querystring = require(\"querystring\");\n\nWADOProxy.convertURL = (url, serverConfiguration) => {\n    if (!Settings.enabled) {\n        return url;\n    }\n\n    if (!url) {\n        return null;\n    }\n\n    const serverId = serverConfiguration._id;\n    const query = querystring.stringify({url, serverId});\n    return `${Settings.uri}?${query}`;\n}"]}